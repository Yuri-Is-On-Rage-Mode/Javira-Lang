(@pragma once)

(extern acos   (param x float) (result float))
(extern asin   (param x float) (result float))
(extern atan   (param x float) (result float))
(extern cos    (param x float) (result float))
(extern cosh   (param x float) (result float))
(extern sin    (param x float) (result float))
(extern sinh   (param x float) (result float))
(extern tan    (param x float) (result float))
(extern tanh   (param x float) (result float))
(extern exp    (param x float) (result float))
(extern log    (param x float) (result float))
(extern sqrt   (param x float) (result float))
(extern ceil   (param x float) (result float))
(extern floor  (param x float) (result float))
(extern fabs   (param x float) (result float))
(extern round  (param x float) (result float))
(extern atan2  (param x float) (param y float) (result float))
(extern pow    (param x float) (param y float) (result float))
(extern fmax   (param x float) (param y float) (result float))
(extern fmin   (param x float) (param y float) (result float))
(extern abs    (param x int) (result int))
(extern random (result float))
(extern INFINITY float)

(@if TARGET_JAVA 1
    (asm "public static float fabs(float x){return Math.abs(x);}\n")
    (asm "public static float fmin(float x, float y){return Math.min(x,y);}\n")
    (asm "public static float fmax(float x, float y){return Math.max(x,y);}\n")
    (asm "public static final float INFINITY = Float.POSITIVE_INFINITY;\n")
    (asm "public static float fsqrt(float x){return (float)Math.sqrt(x);}\n")
    (asm "public static float fradians(float degrees){return (float)Math.toRadians(degrees);}\n")
    (asm "public static float fdegrees(float radians){return (float)Math.toDegrees(radians);}\n")
    (asm "public static float fexp(float x){return (float)Math.exp(x);}\n")
    (asm "public static float flog(float x){return (float)Math.log(x);}\n")
    (asm "public static float flog10(float x){return (float)Math.log10(x);}\n")
    (asm "public static float fpow(float base, float exponent){return (float)Math.pow(base, exponent);}\n")
    (asm "public static int round(float x){return Math.round(x);}\n")
    (asm "public static int floor(float x){return (int)Math.floor(x);}\n")
    (asm "public static int ceil(float x){return (int)Math.ceil(x);}\n")
    (asm "public static float fsignum(float x){return Math.signum(x);}\n")
    (asm "public static float fexpm1(float x){return (float)Math.expm1(x);}\n")
    (asm "public static float flog1p(float x){return (float)Math.log1p(x);}\n")
    (asm "public static float fcbrt(float x){return (float)Math.cbrt(x);}\n")
    (asm "public static float fnextUp(float x){return Math.nextUp(x);}\n")
    (asm "public static float fnextDown(float x){return Math.nextDown(x);}\n")
    (asm "public static float fnextAfter(float x, float y){return Math.nextAfter(x, y);}\n")
    (asm "public static float fcopySign(float magnitude, float sign){return Math.copySign(magnitude, sign);}\n")
    (asm "public static float fscalb(float x, int scaleFactor){return (float)Math.scalb(x, scaleFactor);}\n")
    (asm "public static boolean fisNaN(float x){return Float.isNaN(x);}\n")
    (asm "public static boolean fisInfinite(float x){return Float.isInfinite(x);}\n")
    (asm "public static int fcompare(float x, float y){return Float.compare(x, y);}\n")
    (asm "public static float fremainder(float x, float y){return (float)Math.IEEEremainder(x, y);}\n")
    (asm "public static int hypot(float x, float y){return (int)Math.hypot(x, y);}\n")
    (asm "public static float froundToFloat(double x){return (float)Math.rint(x);}\n")
    (asm "public static double froundToDouble(float x){return Math.rint(x);}\n")
    (asm "public static float froundToHalfEven(float x){return Math.round(x);}\n")
)
